{"version":3,"sources":["components/TodoList.js","components/TodoApp.js","serviceWorker.js","index.js"],"names":["TodoList","_this","this","list","props","items","map","item","react_default","a","createElement","key","id","className","text","type","onClick","onDelete","React","Component","TodoApp","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","handleClick","bind","assertThisInitialized","handleChange","handleDelete","e","length","newItem","Date","now","setState","concat","target","value","deletedItemId","filteredItems","filter","TodoList_TodoList","placeholder","onChange","Boolean","window","location","hostname","match","ReactDOM","render","TodoApp_TodoApp","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8KAEqBA,mLACb,IAAAC,EAAAC,KACMC,EAAOD,KAAKE,MAAMC,MAAMC,IAAI,SAAAC,GAAI,OAClCC,EAAAC,EAAAC,cAAA,MAAIC,IAAKJ,EAAKK,GAAIC,UAAU,gGACvBN,EAAKO,KACNN,EAAAC,EAAAC,cAAA,UAAQK,KAAK,SAASF,UAAU,kBAAkBG,QAAS,kBAAMf,EAAKG,MAAMa,SAASV,EAAKK,MAA1F,aAGR,OACIJ,EAAAC,EAAAC,cAAA,MAAIG,UAAU,yDACTV,UAVqBe,IAAMC,WCEvBC,cACjB,SAAAA,EAAYhB,GAAM,IAAAH,EAAA,OAAAoB,OAAAC,EAAA,EAAAD,CAAAnB,KAAAkB,IACdnB,EAAAoB,OAAAE,EAAA,EAAAF,CAAAnB,KAAAmB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAvB,KAAME,KAEDsB,MAAQ,CACTrB,MAAO,GACPS,KAAM,IAGVb,EAAK0B,YAAc1B,EAAK0B,YAAYC,KAAjBP,OAAAQ,EAAA,EAAAR,CAAApB,IACnBA,EAAK6B,aAAe7B,EAAK6B,aAAaF,KAAlBP,OAAAQ,EAAA,EAAAR,CAAApB,IACpBA,EAAK8B,aAAe9B,EAAK8B,aAAaH,KAAlBP,OAAAQ,EAAA,EAAAR,CAAApB,IAVNA,2EAaN+B,GACR,GAAK9B,KAAKwB,MAAMZ,KAAKmB,OAArB,CAIA,IAAMC,EAAU,CACZtB,GAAIuB,KAAKC,MACTtB,KAAMZ,KAAKwB,MAAMZ,MAGrBZ,KAAKmC,SAAS,CACVhC,MAAOH,KAAKwB,MAAMrB,MAAMiC,OAAOJ,GAC/BpB,KAAM,2CAIDkB,GACT9B,KAAKmC,SAAS,CACVvB,KAAMkB,EAAEO,OAAOC,6CAIVC,GACT,IAAMC,EAAgBxC,KAAKwB,MAAMrB,MAAMsC,OAAO,SAAApC,GAC1C,OAAOA,EAAKK,KAAO6B,IAErBvC,KAAKmC,SAAS,CACZhC,MAAOqC,qCAKX,OACIlC,EAAAC,EAAAC,cAAA,QAAMG,UAAU,qDACZL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,aAAd,aACAL,EAAAC,EAAAC,cAACkC,EAAD,CAAUvC,MAAOH,KAAKwB,MAAMrB,MAAOY,SAAUf,KAAK6B,eAClDvB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,0DACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,uBACXL,EAAAC,EAAAC,cAAA,UAAQG,UAAU,0BAA0BE,KAAK,SAASC,QAASd,KAAKyB,aAAxE,iBAGJnB,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOF,UAAU,eAAegC,YAAY,OAAOC,SAAU5C,KAAK4B,aAAcU,MAAOtC,KAAKwB,MAAMZ,gBAvD7FI,IAAMC,iBCQvB4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL7C,EAAAC,EAAAC,cAAC4C,EAAD,MACAC,SAASC,eAAe,SDyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.530790bb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class TodoList extends React.Component{\r\nrender(){\r\n        const list = this.props.items.map(item => (\r\n            <li key={item.id} className='list-group-item list-group-item-light d-flex justify-content-between align-items-center mb-1'>\r\n                {item.text}\r\n                <button type=\"button\" className=\"btn btn-success\" onClick={() => this.props.onDelete(item.id)}>âœ“</button>\r\n            </li>\r\n        ));\r\n        return (\r\n            <ul className='list-group col-12 col-sm-8 col-md-6 col-lg-4 mt-2 p-1'>\r\n                {list}\r\n            </ul>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport TodoList from './TodoList.js';\r\n\r\n\r\nexport default class TodoApp extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            items: [],\r\n            text: ''\r\n        };\r\n\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleDelete = this.handleDelete.bind(this);\r\n    }\r\n\r\n    handleClick(e){\r\n        if (!this.state.text.length) {\r\n            return;\r\n        }\r\n        \r\n        const newItem = {\r\n            id: Date.now(),\r\n            text: this.state.text\r\n        }\r\n\r\n        this.setState({\r\n            items: this.state.items.concat(newItem),\r\n            text: ''\r\n        })\r\n    }\r\n\r\n    handleChange(e){\r\n        this.setState({\r\n            text: e.target.value\r\n        });\r\n    }\r\n\r\n    handleDelete(deletedItemId){\r\n        const filteredItems = this.state.items.filter(item => {\r\n            return item.id !== deletedItemId\r\n          })\r\n          this.setState({\r\n            items: filteredItems\r\n          })\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <main className='d-flex flex-column text-center align-items-center'>\r\n                <h3 className='display-4'>Todo List</h3>\r\n                <TodoList items={this.state.items} onDelete={this.handleDelete} />\r\n                <div className=\"input-group col-12 col-sm-8 col-md-6 col-lg-4 mt-2 p-1\">\r\n                    <div className=\"input-group-prepend\">\r\n                        <button className=\"btn btn-outline-success\" type=\"button\" onClick={this.handleClick}>Add new task</button>\r\n                    </div>\r\n                    \r\n                    <input type=\"text\" className=\"form-control\" placeholder=\"Task\" onChange={this.handleChange} value={this.state.text} />\r\n                </div>\r\n            </main>\r\n        )\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport TodoApp from './components/TodoApp.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <TodoApp />,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}